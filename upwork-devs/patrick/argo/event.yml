apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: minio
  namespace: argo-events
spec:
  dependencies:
  - eventName: example
    eventSourceName: minio
    name: test-dep
  template:
    metadata: {}
    serviceAccountName: argo-events-sa
  triggers:
  - template:
      k8s:
        group: argoproj.io
        operation: create
        parameters:
        - dest: spec.templates.0.steps.0.0.arguments.parameters.0.value
          src:
            dataKey: notification.0.s3.object.key
            dependencyName: test-dep
        - dest: spec.templates.0.steps.1.0.arguments.parameters.0.value
          src:
            dataKey: notification.0.s3.object.key
            dependencyName: test-dep
        - dest: spec.templates.0.steps.2.0.arguments.parameters.0.value
          src:
            dataKey: notification.0.s3.object.key
            dependencyName: test-dep
        resource: workflows
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              namespace: argo
              generateName: glasswall-rebuild-
            spec:
              entrypoint: file-processing
              templates:
              - name: file-processing
                steps:
                - - name: hasher
                    template: hasher-template
                    arguments:
                      parameters:
                      - name: sourceFile
                        value: "glasswallsource/1.jpg"
                - - name: typechecker 
                    template: typechecker-template
                    arguments:
                      parameters:
                      - name: sourceFile
                        value: "glasswallsource/1.jpg"
                - - name: rebuild 
                    template: rebuild-template
                    when: "{{steps.typechecker.outputs.result}} == ok"
                    arguments:
                      artifacts:
                      - name: sourceFile
                        from: "{{steps.hasher.outputs.artifacts.sourceFile}}"
                      parameters:
                      - name: sourceFile
                        value: "glasswallsource/1.jpg"
              - name: hasher-template
                inputs:
                  parameters:
                  - name: sourceFile
                  artifacts:
                  - name: minio
                    path: /glasswallsource
                    s3:
                      endpoint: argo-events.argo-events:9000
                      insecure: true
                      bucket: input
                      key: glasswallsource
                      accessKeySecret:
                        name: my-minio-event-cred
                        key: accesskey
                      secretKeySecret:
                        name: my-minio-event-cred
                        key: secretkey
                container:
                  image: alpine:latest
                  command: [sh, -c]
                  args: ["ls -al /glasswallsource"]
                outputs:
                  artifacts:
                  - name: sourceFile
                    path: /{{inputs.parameters.sourceFile}}
              - name: typechecker-template
                inputs:
                  parameters:
                  - name: sourceFile
                script:
                  image: python:alpine3.6
                  command: [python]
                  source: |
                    s = "{{inputs.parameters.sourceFile}}"
                    result = "ok" if s.endswith('.jpg') or s.endswith('.pdf') else "nok" # This output can be used as condition for the next step
                    print(result)
              - name: rebuild-template
                inputs:
                  parameters:
                  - name: sourceFile
                  artifacts:
                  - name: sourceFile
                    path: /{{inputs.parameters.sourceFile}}
                container:
                  image: azopat/gw-rebuild
                  env:
                  - name: INPUT_LOCATION
                    value: "/glasswallsource"
                  - name: OUTPUT_LOCATION
                    value: "/rebuild/output"
                outputs:
                  artifacts:
                  - name: fileRebuilded
                    path: /rebuild/output
                    s3:
                      endpoint: argo-events.argo-events:9000
                      insecure: true
                      bucket: output
                      key: rebuild/{{inputs.parameters.sourceFile}}.tgz
                      accessKeySecret:
                        name: my-minio-event-cred
                        key: accesskey
                      secretKeySecret:
                        name: my-minio-event-cred
                        key: secretkey
        version: v1alpha1
      name: minio-workflow-trigger
